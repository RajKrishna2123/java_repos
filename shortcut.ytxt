elements of java 
methods for 
1. output

    System.out.print("Enter the number of elements you want to store: "+a+""hgffh"+);  

2.input

    import java.util.Scanner;
    Scanner sc=new Scanner(System.in);
    n=sc.nextInt();

3. array 

    int[] array = new int[10];

4. input in array 

    for(i=0; i<n; i++)  
        {  
            array[i]=sc.nextInt();  
        } 

5. random

    int a =65 + (int)(Math.random() * 90);       
       char c=(char)a; 
       System.out.print(c);

6. basic skeleton of java

    public class <file name>   
    {  
        public static void main(String[] args)   
        { }
    }

7. function architeccture 

8. Methids
public class mrthods {
    static int/void sum(int a , int b)
    {
        
    }
    public static void main(String[] args)
    {

    }
}
    variables in method is parametre and values passed to method is argument .
    calling method is actual 
    method signature :- sum(int a,int b) is called method signature.
    complete method form static void to last } is method definition.
    categories of parametre:
    1. with return type with paramtre.
    2. with return type whithout parametre.
    3.without return with parametre.
    4.whithout return without parametre.
    it is a type of method invocationwhere fu nctiona name is same but having differnet no of parametre ,different order of parametre and diffrent datatype 
    the program below is famous as amigo's invocation 
    wap to find area of a shape 
    shapes are triangle circle and rectangle 


    public class Tester {
   static int n1 = 0, n2 = 1, n3 = 0;
   static void fibbonacci(int count) {
      if (count > 0) {
         n3 = n1 + n2;
         n1 = n2;
         n2 = n3;
         System.out.print(" " + n3);
         fibbonacci(count - 1);
      }
   }
   public static void main(String args[]) {
      int count = 5;
      System.out.print(n1 + " " + n2);
      fibbonacci(count - 2);
   }
}

the process of creating an oject is called instantiation 
static doesn't required an OBJect to be invoked 
type of variable in java
local variable
global variable
static variable
automatic variable
external variable

math module 
random module 
wap to perform method overloading by passing single argument to the method series 

anoymous array are that array which has no explicit reference variable for the array 
metgod to define array :=
int <variable name> = {"element 1","element2"};
int[] <variable namr> = new int[]

pass by variable using array
// while compiling pass by value using array the changes will be seen as error inside the function 
SEARCHING :- LENEA AND BINARY 
SORTING :- BUBLE INSERTION,HEAP ,QUICK ,HEAP,MOSE,REDIX
oops - interface (multiple inheritace)
class A 
extends B 
extends c
but C++ can implement the same with more dificulty and complexity 
java class cannot be a subclass of more than 1 super class
so java provides alternate approach to support the concept of multipe inheritance 
, knon as interface and can be implemented using 
implements keyword  

syntax 

interface <interface name>
{
    variable name;
    method() decleartion;

}
interface item 
{
    static final int c ;
    void display ();

}
it is similar to class
that contains methods and variable but with method is decleared as abstract
by defaut methid must be inherited by the class for method definition variable 
is treated as final 
example 
inteface itemconstant 
{
    int code=100;
    string name ="fan";

}
[
interface itemmethod
{
    void display();
}
interface item extends Itemconstant , Itemmethods 
{
}
or 
class item implements Itemconstant, Itemmethod  
    {
        
    }  
]
exception handelling
exception vs error 
"to err is human " human beings commit many errors in his life softe=ware engineer may also commit 
several error while developing software error these error are called bugs and the process of removing them is called
 debugging 

 ->types of error in java 
 1.compile time error :- known as syntactical errors it is found in the code due to which a program fails to compile 
 for example missing semicolon ,misplaced bracket bloack mis spelling identifiers incompatible assignment 
 when we have compilation error then java doesn't create .class file until the program becomes error free .


 2.run time error :- it represents inefficiancy of computer systemn to exercute particular statements
 insufficient memory wroing logic wrong output, stack overflow ,array out of bond exception 
 Nan error (not a number)
 for example :- 
 class Err1 
 {
     psvm() // no parametres 
     {
         sop ("where is the error ");
     }
 } 
"
runtime error are not detectend by java compiler they are detected by jvm
logical  error 
it depicts the flaws in the logic of the program the programer is solemony responsible for these kind of errors
exception an exception is a condition that is caused by runtime error in program
question can i call a compile time error an exception 
answer NO, 
how to handle exception at  complie time 
psvm (_______) throwws IOException 

exceptionhandeling 
if we want to run the program without any error or exception then we w=should try to catch yje exception object 
thrown by the error condition and then display an apropriate message for taking corrective action this task is 
known as exception handling 

Exception handling Mechanism 
try block 


*******draw.io 


java usses a keyword try to preface a block of code that is likely to to cause an eror and "throw " an exception throw is also a keyword 
a catch block defined by the keyword "catch" which catches the exception thrown by the block and handles it apropriately
finally cloack is excuted irrespective of whether there is an exception or not 
class Excep1
{
    psvm(_____)
    {
        try 
        {
            sop ("");
            int n = args.length;
            sop("N="+n);
            int a=45/n;
            sop ("a="+a);

        }
        catch (exception e)
        {
            sop(e);
        }
        finally
        {
            
        }
    }
}

javac Excep1.java
java Escept1
user defined exception
custome exception
import  java.lang.Exception
class MyException extends Exception
{
    private static int acess[]={1001,1002,1003,1004,1005};
    private static String name[]={"roma" ,"sudha","aparna","laxmi","rajni"};
    private String double  bal[]={1000.000,1200.oo,6500.00,99.00.1100.55};
    MyException(String s)
    {
        super(s);
    }
}
public static void main(String[] args)
{
    try 
    {
        System.out.println("A/C No"+"\t"+"name"+"\t"+"balance");
        for (int i=0;i<5;i++)
        {
            System.out,println(accno[i]+"\t"+name)
        }
    }
}















for custome exception users want throw thier own exception 
syntax throw new throwable_Subclass ;
ex throw new ArithmaticException();
throw new NumberformatException
***throw is a keyword 
if (z<0.01)
throw new MyException("Number is too small");
if (bal[a]<1000)
throw new MyException("less balance");

throws clause
rule says that thee programer should handle compile time exception (checked exception)
if programer doesn't want to handle a checked exception then they should throw them out using 
throws clause   
throws clause used when program don't want to hab=ndle the exception 
throw clause is used when the programer wants to throw an exception explicitly using try catch block    



life cycle of a thread 
new born state (when object of thread is created )
    ->Thread T= new Thread();
RUNNABLE state (wheenerver we start a thread ) READy state 
    ->start();
RUNNING STATE 
BLOCK STATE 
    ->whenever we call a sleep method :  Thread.sleep(1000);(work for a definate time)
    ->another method is: suspend();
    ->another method is: wait();(for infinite)
    ->wait for IO requirement
    ->wait for lock
    ->all blocked method goes to runnable method via commands as follows 
        ->Resume();

yeild() method to put thread directly from running state to runnable state 
constructors of thread class 
        -> jvm defines constructor on its own when not defined by a developing
        -> but when defined it does't creates on its own 
    ->Thread()
    ->Thread(String str)
    ->Thread(Runnavle rg)
    ->Thread(Runnable tg,String str)
    ->Thread(Runnable lg Runnable rg)
    ->Thread(ThreadGroup tg Runnable rg String str)

    *Thread METHODS 
        ->SetPriority(int p);
            Thread.MAX.PRIORITY=12
            Thread.MIN.PRIORITY=1
            Thread.NORMAL=5
            exmaple:- Thread t=new Thread();
                      t.SetPriority(8)
            higher no means higher priority.

        -> int getPriority()
        ->SetName(String s)*note this method has no significance so never needed to
          specify at all just kept as an facility if needed 
            t.SetName("string");
        ->Boolean isAlive()

DEMON THREADS
    ->these are lowest priority thread as service provider works when jvm is ideal
      for example garbage thread ,GC garbage collection. 
    ->demon thread in java is a service provider that [provides services to the 
      user thread. 
    ->it is used for supporting the user thread in background. 
    ->it is low priority thread.
    ->there are many java demon theads running aotumatically example ,gc ,
      finalizer(works as memory cleaner in backgroud to save memory)
    ->

not*_ methods starts from small alphabets but name of class starts with capital letter 

*imp questin :- why call start method instead of run :-
        answer  BOTH methods are correct non of them will throw error but when we call 
                run method it will act as normal runner for a code snipet but when we 
                call a start method it will start code snippet with seperate thread 
                and context swithching which is not possible with run method .


>>>>>imp>>>>>>swing setup ðŸ˜‘ðŸ˜‘
important snipet always required to type 
    ->import javax.swing.*;
    ->JFrame f= new JFrame(); *note write it under psmv(){}.

now using JFrame as f we can use following inbuilt functions as :
    ->f.setTitle("text"); -> this defines the tittle bar of application heading name
     of the application.
        
        -> same thing can be done by simple method as: f= new JFrame("");
            
            ->*note to use above method you need to specify: static JFrame f; 
                    under main class file but out of psmv(){}

   
    ->f.setVisible(true); -> setting visibility (makes application window visible LOL).
   
   
    ->f.setSize(x,y); -> set the boundry of the frame as default when opening
      ( x= x co-ordinate, y= y co-ordinate).
    *->Remember never use "f.setLayout(null)" it is useless peice of studborn shit!!!!!
       because after doing hours of coding to bring an output this maniac will make that
       all null !!ðŸ˜‚ðŸ˜‚ðŸ˜‚ðŸ˜‚ do pranks with it.

    *-> must write syntax "f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);" if not 
        written even if you close the output window the code will still run in backgroud
        which is problematic to close every single time (like killing every process
        maually via task manager or other tools like dump operation in vs code which
        kills the process)ðŸ¥²ðŸ¥²a 
    
    *->In order to set the backgroud image for the body of the frame you can use 
        following code its must to type in order to put a bg image in the body of the 
        frame:- 
        f.setContentPane(new JLabel(new ImageIcon("immage location with // symbol")));
           *note:- that it will only work when address is puth with // symbol by default 
            in windows location \\ symbloo is used change location tag with // as web 
            location
    
    -> JLabel this fuction helps in defining tittle first then add them to pannel 
        later as a reffrences defined as follows.
        l= new JLabel("YO YO YO YO !!!!",JLabel.RIGHT);

    ->we can define multiple pannel and resize them and position them at certain places 
      using FlowLayout() and defined as belows :-
        f.setLayout(new FlowLayout());
      





now using pannel in java as JPanel :
    ->  every thing that we make in JFrame like button label textfeild form all has to
    be added in pannel via JPanel.add(<variable>); so that it is added in the frame 
    if not done nothing will show up in output ðŸ˜ŽðŸ˜Ž,.ðŸ˜‘ðŸ˜‘better keep this in mind LOL
    ;).
    *->if two pannels are defined within same block of code then 
       the most recent one added to tha farme will be considered as final and none of
       other will be taken in consideration.
       for exmaple 
                f.add(q);

		        f.add(p)
                here p will be taken in considertion anything done within q will not be
                considered 
    *-> in order to understand pannels in a better way we can use following command to 
        manipulate the seize of each individual pannel 
             p1.setPreferredSize(new Dimension(250,150));







             